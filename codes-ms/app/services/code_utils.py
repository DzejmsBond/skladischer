# Author: Jure
# Date created: 4.12.2024

# Logging default library.
import logging

from ..schemas import code_schemas as schema
from ..helpers.error import ErrorResponse as Err
from ..config import RAPIDAPI_HOST, RAPIDAPI_KEY, RAPIDAPI_URL, SIZE

# Async HTTP client library.
# FastAPI is used for creating endpoints however this is a library
# used in a similar manner as curl commands that can process async functions.
from httpx import AsyncClient

async def check_reachable():
    response = await AsyncClient().get(RAPIDAPI_URL)
    if response.status_code == 401:
        return True
    return False

async def generate_code(headers: dict, params: dict) -> Err | str:
    """
       Create a request from `headers` and `params`.

       Args:
           headers (dict): Headers of the HTTP GET request.
           params (dict): Parameters of the HTTP GET request.

       Returns:
           ErrorResponse | str: The error response if an error occurred or response text otherwise.
       """

    response = await AsyncClient().get(RAPIDAPI_URL, headers=headers, params=params)
    if response.status_code == 200:
        return response.text

    logging.debug(f"Item code generation failure: {response.text}")
    return Err(message=f"Could not generate code: {response.text}", code=response.status_code)

# TODO: Should colors be represented in HEX?
#        Good simple library for colors is 'webcolors'.
async def create_code(code : schema.CodeCreate) -> Err | str:
    """
    Create a QR code from ``code_id`` for later item identification.
    Returnes a `Base64` encoded image of the QR code created.

    Args:
        code (CodeCreate): The code details to be created, adhering to the schema.

    Returns:
        ErrorResponse | str: The error response if an error occurred or encoded image in string format otherwise.
    """

    try:
        headers = {
            # Rapid key generated by subscription to RapidAPI.
            "X-RapidAPI-Key": RAPIDAPI_KEY,
            "X-RapidAPI-Host": RAPIDAPI_HOST
        }

        params = {
            "data": code.code_id,
            "size": SIZE,
            "foreground_color": code.color,
            "background_color": code.background_color
        }

        if code.label:
            params["label"] = code.label
            params["label_alignment"] = code.label_alignment
            params["label_size"] = code.label_size

        response = await generate_code(headers, params)
        return response

    except Exception as e:
        logging.warning(f"Generating item code failure: {e}")
        return Err(message=f"Unknown  exception: {e}", code=500)